# Production Dockerfile for Mem0 Service
# Multi-stage build for security and performance optimization
# Cache bust: 2025-06-28-v2

# Stage 1: Build stage
FROM python:3.11-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    python3-dev \
    build-base \
    curl-dev

# Set working directory
WORKDIR /app

# Copy requirements from server directory and verify
COPY server/requirements.txt ./
RUN echo "=== VERIFYING REQUIREMENTS.TXT ===" && \
    cat requirements.txt && \
    echo "=== LINE COUNT ===" && \
    wc -l requirements.txt && \
    echo "=== CHECKING FOR SENTENCE-TRANSFORMERS ===" && \
    (grep -i sentence requirements.txt || echo "No sentence-transformers found - GOOD!") && \
    echo "=== END VERIFICATION ==="

# Install Python dependencies with better timeout and build tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --timeout=600 -r requirements.txt

# Stage 2: Production stage
FROM python:3.11-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    tini \
    libffi \
    openssl

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code from server directory
COPY --chown=appuser:appuser server/ .

# Verify we have the right files
RUN echo "=== VERIFYING COPIED FILES ===" && \
    ls -la && \
    echo "=== MAIN.PY CONTENT ===" && \
    head -10 main.py && \
    echo "=== END VERIFICATION ==="

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chown -R appuser:appuser /app/logs /app/data

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PORT=8002

# Security: Use non-root user
USER appuser

# Expose port
EXPOSE 8002

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Default command
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002"]

# Labels for metadata
LABEL maintainer="Cognition Suite Team"
LABEL version="1.0.1"
LABEL description="Mem0 Service - Production"
LABEL org.opencontainers.image.source="https://github.com/cognition-suite/cognition-suite"
